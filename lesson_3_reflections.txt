Q: When would you want to use a remote repository rather than keeping all your work local?
A: A remote repository allows you to back up all your code, as well as share it with others more easily.

Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your
remote repository?
A: This allows you to have more control over the state of your working directory, so that you can maintain the local
code base and avoid changes made by others that might break your code. This is especially true if you are both
working in the same branch.

Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?
A: Forks are clones done directly on GitHub, and copy a repository to another GitHub account while referencing back
to the original author's repository. Clones are general copies of another repository, either local or remote, that
include the code and Git history of the original repository. Branches are splits off of a code base, still connected to
the same repository, where changes will not impact the master or other branches.

Q: What is the benefit of having a copy of the last known state of the remote stored locally?
A: You can see how your local changes compare to the remote code, even if the network is offline.

Q: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A: I would have to use a number of different tools, including FTP, email, possibly some other project management
tools. It would definitely be harder.

Q: When would you want to make changes in a separate branch rather than directly in master? What benefits does each
approach have?
A: Working in master is much simpler, because there isn't a need to track other branches and merge changes back and
forth while working on the code. For an uncomplicated project with only one author, this makes sense to simply use
master for tracking changes. However, for a complicated project with multiple authors, multiple maintenance and
development releases, experimentation or major code migrations, using branches to do work makes much more sense.
